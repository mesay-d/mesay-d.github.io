const getDB = require('../utils/database').getDb;
const { ObjectID } = require('mongodb');
// let book = [];
const mongoClient = require('mongoClient');

// const collectionName = 'books';

//todo - change the id in to _id
module.exports = class Book {
    constructor(id, title, isbn, publishedDate, author) {
        this._id = id;
        this.title = title;
        this.isbn = isbn;
        this.publishedDate = publishedDate;
        this.author = author;
    }
    static getAll() {
        return getDB().collection('books').find().toArray(); //promise
    }

    save() {
        return getDB().collection('books').insertOne(this); //todo - promise
        // this.id = Math.random().toString(); //normally, id is generated by DB, but not always
        // book.push(this);
        // return this;

        // MongoClient.connect('mongodb://localhost:27017', { useUnifiedTopology: true })
        // if (err) throw err;
        // const db = client.db('testDB');
        // const doc = { firstname: 'Daniel', lastname: 'Haile', age: 11 };
        // db.collection('students').insertOne(this, (err, docInserted) => {
        //     if (err) throw err;
        //     console.log(docInserted.result);
        //     console.log(`Success: ${JSON.stringify(docInserted)}!`);
        //     return client.close();
        // })


    }

    static getBookById(bookId) {
        return book.find(boo => boo.id === bookId);
    }

    update() {

        return getDB().collection('book').updateOne({ _id: new ObjectId(this._id) }, { $set: { 'title': this.title, 'price': this.price, 'description:': this.description } });

        // const index = book.findIndex(b => b.id === this.id); //we found the index of the book id
        // if (index > -1) {
        //     book.splice(index, 1, this)
        //     return this;
        // } else {
        //     throw new Error('NOT Found');
        // }
    }
    static deleteById(bookId) {
        return getDB().collection('book').deleteOne({ _id: new ObjectId(bookId(bookId)) });
        // const index = book.findIndex(p => p.id === bookId);
        // if (index > -1) {
        //     book = book.filter(p => p.id !== bookId);
        // } else {
        //     throw new Error('Not Found!');
        // }

    }

    static findById(bookId) {
        return getDB.collection('books').findOne({ _id: new ObjectId(bookId) });


        // const index = book.findIndex(p => p.id === bookId);
        // if (index > -1) {
        //     return book[index];
        // } else {
        //     throw new Error('Not Found!');
        // }
    }

}